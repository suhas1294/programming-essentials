there are two commands:
    mongod : to start mongo server in local system
    mongo : to connectto database cli

'db' is a reserved keyword : 
step1: use myDbName
step2: db.myCollectionName.insertOne({...})
step3: db.myCollectionName.find() // list all

'show dbs' : will list alldatabase
'show collections' : will list collections
'quit()' : to quit the shell

db.tours.insertMany([ {name: "hkabdf", price: 23}, {name: "hkabdf", price: 23} ])

Quering:
    db.tours.find({name: 'coorg'});
    db.tours.find({ price: {$lte: 500} });
    db.tours.find({ price: {$lte: 500}, rating: {$gte: 4} });   // AND condition
    db.tours.find( { $or: [{ price: {$lte: 500}, rating: {$gte: 4} }] } );   // OR condition
    db.tours.find( { $or: [{ price: {$lte: 500}, rating: {$gte: 4} }] }, {name: 1} );   // Projection, ex: we want only name field
    db.tours.udpateOne({name: "something"}, {$set: {price: 999}})
    db.tours.udpateMany( {price: {$gte: 500}, rating: {$gt: 4.5}}, {premium: true} )
    db.tours.deleteOne({name: "something"});
    db.tours.deleteMany({rating: {$lt: 3} });
    db.tours.deleteMany({}); // delete all

Mongoose :
    there are tow ways of filtering data:
    1.  Just as we define a javascript object and pass it
    2. use built in methods

    1. sort by model fields:
    // give all records with price exactly 500 and rating exactly 4
    example.com/api/v1/tours?price=500&rating=4
    // give all records, recent first:
    query.sort("-createdAt");

    2.sort by model fields with additional filtering    
    // give all records with price less then or equal to 500 and rating greater then or equalto 4
    example.com/api/v1/tours?price[lte]500&rating[gte]=5
    
    3. sort by custom fields (which are not in model)
    // give all records with price less then or equal to 500 and rating greater then or equalto 4 and sort by price ascending
    example.com/api/v1/tours?price[lte]500&rating[gte]=5&sort=price
    // give all records with price less then or equal to 500 and rating greater then or equalto 4 and sort by price descending
    example.com/api/v1/tours?price[lte]500&rating[gte]=5&sort=-price

    4.Field limiting( give only those fields requested by user)
    example.com/api/v2/tours?fields=name,duration,difficulty,price

Aggregation pipeline:
    $unwind: deconstruct an array field from input documents and output one document for each element of the array

Middleware in Mangoose:
    Before save command and actual saving happens, we can run some Middleware on the document. (or even after actual saving)
    hence we have 'pre' and 'post' hooks.
    There are 4 type of middleware in mangoose:
        document (act on currently processed document)
        query
        aggregate
        model middleware

    Ex: tourModel.js
        tourSchema.pre('save', function(){
            
        })
    
____________________________________________________________

Mongo DB Data modelling:
    Process of taking unstructured data generated by real world screnario and structuring it into logical data model
    1. Identify different types of relationships between data
    2. Referencing/normalisation vs embedding/de-normalisation
    3. Embed or reference other document
    4. types of referencing

Three big types of relationship:
    1:1
    1:many
        1:few (1 movie has few awards)
        1:many (1 movie has thousand reviews)
        1:ton (app has logs)
    many:many (1 movie has many actors and actors act in many movies)

____________________________________________________________

Configuring Mongo DB in a node js application:

two ways of defining a relations between models 
    Nested or Embeded Documents
    References

const mongoDb = require('mongodb');
const MongoClient = mongodb.mongoClient();

CONNECTING TO DATABASE:

    let _db;
    const mongoConnect = callback => {
        MongoClient.connect("<some_remote_url>")
            .then(client => {
                console.log("connected");
                _db = client.db();
                callback();
            })
            .catch(err => {
                console.lo(err);
                throw err;
            });
    }
    const getDb = () => {
        if (_db){
            return _db;
        }
        throw "No database found";
    }

    exports.mongoConnect = mongoConnect;
    export.getDb = getDb;

one for connecting and storing connecting to database (mongoConnect);
one more export to return access to that connected database (getDB)
This paste expires in <5 min. Public IP access. Share whatever you see with others in seconds with Context.Terms of ServiceReport this
