Installation in mac

brew tap mongodb/brew
brew install mongodb-community@4.2

In macos catolina and higher, create a 'data' and 'db' folder inside : /Users/<username>
ex: /Users/johndoe/data/db

To start the mongo db server:
mongod --dbpath "/Users/John Doer/data/db/
mongod --dbpath "/Users/John Doer/data/db/ --port 27018


to login to mongo db shell:
mongo
mongo --port 27018 

Know the difference between "mongod" and "mongo" commands

show dbs
use shop
db.products.insertOne({"name": "a book", price: 24.99})
db.products.insertOne({name: "a book", price: 24.99}) 	// works without quotes as well in the mongo shell

// after inserting you'll get the acknowledgement like below:
{
	"acknowledge": true,
	inertedId: ObjectId("cjhsb328234jkb345bjk45")
}

db.products.find().pretty()

drivers are the bridge bwtween your application and the database.

flow of how mongo db works:
Front end -> back end -> dirver -> mondodb server -> storage engine -> database(or file system)

________________________________________

Sample data :

[
  {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
]

________________________________________

operations:
________________________________________

Create: 
	insertOne(data, options)
	insertMany(data, options)

Update:
	updateOne(filter, data, options)
	updateMany(filter, data, options)
	replaceOne(filter, data, options)

Read:
	find(filter, options)
	findOne(filter, options)

Delete:
	deleteOne(filter, options)
	deleteMany(filter, options))
________________________________________

Deleting a table(collection):

db.<collectionName>.deleteOne(filter, options)
Ex: 	db.flightData.deleteOne({departureAirport: "TXL"})
Filter is a document defined by curly braces

db.<collectionName>.deleteMany() // does not work! 
________________________________________

you dont pass in a document describing the change like this(bcoz mongodb does not know how to interpret it):

db.flightData.upadateOne({distance: 12000}, {marker: 'delete'})		// ERROR ! must contain atomic operators
db.flightData.upadateOne({distance: 12000}, {marker: "delete"})		// ERROR ! must contain atomic operators

So you send a document with a special variable with '$' symbol
db.flightData.upadateOne({distance: 12000}, {$set: {marker: "delete"}})

its this key is present, it will update existing value, otherwise it will add new key value for the matching document.
db.flightData.upadateMany({}, {$set: {marker: "toDelete"}}) // {} denotes update for all documents

db.flightData.deleteMany({})
db.flightData.deleteMany({marker: "toDelete"})

________________________________________

db.flightData.insertMany([
  {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
])
________________________________________

db.flightData.find({interContinental: true})
db.flightData.find( {distance: {$gt: 10000} } )

below update statements will give an error:

read it as : update first flighData from the list of flightDatas whose distance is less then 500
db.flightData.updateOne( {distance: {$lt: 500} }, {newKeyToBeAdded: "newValueToBeAdded"} )

read it as : update All flighData from the list of flightDatas whose distance is less then 500
db.flightData.updateMany( {distance: {$lt: 500} }, {newKeyToBeAdded: "newValueToBeAdded"} )

But just 'update' works, but it will override everything except _id
db.flightData.update( {distance: {$lt: 500} }, {newKeyToBeAdded: "newValueToBeAdded"} )
'update' updates the existing record with the new object passed  

db.flightData.replaceOne( {_id: ObjectId(23jk4b46jkb4qj34khdsfnk43n5)}, {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  } )


When more then X records are inserted and pretty printed, all may not be shown in console.
use 'it' command to show all remaining records.

when there are millions of documents, then sending it over the wire will take a lot of time.
so instead of returning complete data, it returns a CURSOR OBJECT which is an object with lot of meta data behind  it that alllows to cycle through the results. 

db.passengers.find().toArray()  // gives all results

db.passengers.find().forEach((eachObjOfPassenger) => {printJson(eachObjOfPassenger)}) // passing arguments to an anonymous function, in this case printJson is a existing method.

db.passengers.find().forEach((eachObjOfPassengerInArg) => {someAnonymousFunc(eachObjOfPassengerInArg)})


find() gives you the cursor and not the element itself. 
cannot use pretty() on findOne(), findOne() does not give cursor

________________________________________

"projections"

say this is the data that is stored in db:
{
	_id: ObjectId("32uhg4hkb35uo3h45kj4b564bj6")
	name: "somename",
	age: 25,
	notNeeded: "someData"
}

but when u fetch from data, u need only "name field", in that case, we use projects which is a kind of filter applied at mongodb server itself instead of passing data through wire and then filtering at client end.


db.passengers.find({}, {name: 1}).pretty() // include what all fields you need to be in result. _id is always included in result. how to exclude ?:

db.passengers.find({}, {name: 1, _id: 0}).pretty()

________________________________________

Embedded Documents:

Having one document indside another document. (nested documents)
mongo allows us to store nested nested upto 100 nested documents which is called hard limit and can be increased.
and the document size upto 16Mb 
you can store Array of document.

Nested document and array inside our document:

{
	_id: ObjectId("32uhg4hkb35uo3h45kj4b564bj6")
	name: "somename",
	age: 25,
	notNeeded: "someData"
	nestedData: {
		fieldOne: "valueone",
		fieldTwo: "valueTwo"
		someArray: [
			"A",
			"B",
			"c"
		]
	},
	hobbies: ["sports", "cooking"] 
}

________________________________________


Accessing structured document:

db.passengers.findOne({name: "someUniqueName"}).hobbies

searching a document:
db.passengers.find({hobbies: "sports"}).pretty( )
________________________________________

Assignment problem:

{
	"firstName": "John",
	"lastName": "doe",
	"age": 29,
	"history": [
		{
			"disease": "cold", 
			"treatment": "crocin"
		}
	]

}

inserting multiple data

// creating a database "hospital_system"
use hospital_system

// creating patients collection inside "hospital_system" db
db.patients.insertMany([
	{"firstName":"John","lastName":"doe","age":29,"history":[{"disease":"cold","treatment":"crocin"}]},
	{"firstName":"James","lastName":"Bond","age":45,"history":[{"disease":"fever","treatment":"dolo"}]},
	{"firstName":"Money","lastName":"Penny","age":33,"history":[{"disease":"covid","treatment":"kashaya"}]}
])

// updating a patient's record
db.patients.updateOne(
	{ firstName: "James"}, 
	{ $addToSet: {history: {"disease": "muscle catch", treatment: "rest"} } }
)

// find all patients whose age is more then 30
db.patients.find({age: {$gt: 30}}).pretty()

// deleting patients who has got the cold as disease
db.patients.deleteMany(
	{"history.*.disease": "cold"}
)

db.patients.deleteMany(
	{ "history": { "disease":"cold"} }
)

//working code:
db.patients.deleteMany(
	{"history.disease": "cold"}
)

________________________________________

deleting the databse:

use databaseName
db.dropDatabase()

deleting the collections:
db.myCollection.drop()
________________________________________

// null indicates that you have the field but it does not have data. (SQL approach)
db.procucts.insertOne({name: "A book", price: 12.99, details: null})

________________________________________

Data types:

text
boolean
numbers
	int32
	int64
	decimal
	ObjectId
	ISODate
		timestamp
	Embedded document
	Arrays
________________________________________

db.compaines.insertone(
	{
		name: "Fresh apple inc",
		isStartUp: true,
		employees: 33,
		funding: 12345678901234567890,
		details:{
			{
				ceo: "Mark pichai",
				tags: [
					{title: "super"},
					{title: "perfect"}
				],
				foundingData: new Date(),
				insertedAt: new Timestamp()
			}
		}
	}
)

db.stats() // check for avgObjSize

db.numbers.insertOne({a: NumberInt(1)}) // inserts a 32bit int number which reduces the avgObjectSize in db.stats(), otherwise, by default it stored decimal number which will increase the avgIbjectSIze

checking type of field:

type db.numbers.findOne().a 	// prints 'number' in console
________________________________________

Relationships:


Nested/Embedded documents:

{
	user: "John Doe",
	age: 23,
	address: {
		street: "6th lane",
		city: "new york"
	}
}

Here address could have been stored in a new collections, but since its closely associated with that user and need not change often, it is good practice to store it as a nested document.

Reference:
say suppose you are storing documents in following formats for 'customers' collection:

{
	user: "John Doe",
	favBooks: [
		{"name": "something", isbn: "12345678"},
		{"name": "nothing", isbn: "9876543"},
		{"name": "everything", isbn: "2345678"}
	]
},
{
	user: "james",
	favBooks: [
		{"name": "something", isbn: "12345678"},
		{"name": "nothing", isbn: "9876543"},
		{"name": "everything", isbn: "2345678"}
	]
}

In this case, if a book title is changes, In all places it needs to be changed which is not a good idea.
So we store it by reference as below. Note that we have two seperate collections 'Books' and 'customers':

customers:

{
	user: "John Doe",
	favBooks: [
		"bid1",
		"bid2",
		"bid3",
	]
},
{
	user: "james",
	favBooks: [
		"bid1",
		"bid2",
		"bid3",
	]
}

Books collection:
{
	_id: bid1,
	name: "something",
	isbn: "123456789"
}
{
	_id: bid2,
	name: "nothing",
	isbn: "234567"
}

In this case, in case we need to change book details, we change it only in the books collection.

________________________________________

Many to Many relationship:

customer - product - order

approach1: using 3 tables/collections

	'customers' collection
	{
		_id: ObjectId("354dsfdifbsdf")
		name: "some name",
		age: 23,
		isPremium: true
	}

	'products' collection:
	{
		_id: ObjectId("kshgfkl3284235")
		name: "A Book",
		price: 12.99
		isbn: "jk435k3hl5"
	}

	orders collection:
	{
		producrId: ObjectId("kshgfkl3284235")
		customerId:	ObjectId("354dsfdifbsdf")
		quantity: 2
	}

approach2: only two collections: (mongo db style)

	customers collection
	{
		_id: ObjectId("354dsfdifbsdf")
		name: "some name",
		age: 23,
		isPremium: true,
		orders: [
			{
				productId: ObjectId("kshgfkl3284235"),
				quantity: 2
			},
			{
				productId: ObjectId("2k3b4ludsfslif"),
				quantity: 1
			},
		]
	}


	'products' collection:
	{
		_id: ObjectId("kshgfkl3284235")
		name: "A Book",
		price: 12.99
		isbn: "jk435k3hl5"
	}
________________________________________


so when there is a many to many relation model, dont directly jump to conclusion that referencing is the solution. instead think in these ways:

1. how often do you fetch the data.
2. how often do you change the data. and if you change id, do you need to change it everywhere ?
3. duplicates are fine ?

embedded approach:
	group data together logically
	great for data that belongs together and is not really overalapping with other data.
	avoid super-deep nesting or extremely long arrays(16mb size limit for document)

Referencing approach:
	split data across collections

________________________________________

many to many using reference:

one book HAS many authors
an author BELONGS to many books

db.authors.insertMany([
	{name: "James Bond", age: 29},		// _id: ObjectId("24354s6576dsfsfwekr23")
	{name: "John doe", age: 35}			// _id: ObjectId("k1b2hbkbeb32ubuh63kuj")
])

db.books.insertMany([
	{
		title: "SOme book", 
		price: 12.99, 
		authors: [
			ObjectId("24354s6576dsfsfwekr23"), 
			ObjectId("k1b2hbkbeb32ubuh63kuj")
		]
	}
])

________________________________________


merging related documents which are referenced:  $lookup

db.books.aggregate(
	[
		{
			$lookup:{
				from: "authors",			// collection name
				localField: "authors",		// array of ObjIds, where keys are stored
				foreignField: "_id",		// 
				as: "creators"				// alias

			}
		}
	]
)

________________________________________

Building a blog:

use blog

db.users.insertMany([
	{name: "something", age: 33, email: "test@gmail.com"},
	{name: "nothing", age: 45, email: "anothertest@gmail.com"}
])

db.posts.inertOne(
	{
		title: "MyFirstpost", 
		text: "some description of post", 
		tags: ["new", "awesome"], 
		creator: ObjectId("h3b42bkjnl345n365"),
		comments:[
			{
				text: "I like this post",
				author: ObjectId("231k4jbekjsfbjldgs")
			}
		]
	}
)
________________________________________

schema validation:

validation level
	strict (all inserts and upadates are chcked)
	moderate (inserts are checked, but updates are only checked for documents which were valid before)
	(i.e., if you had some invalid documents before setting up validation in your db, then you could still change this document even if they dont fit into schema.)
validation action:
	error
	warn
________________________________________

db.posts.drop()
db.posts.findOne() //null
db.createCollection("posts", {
		validator: {
			$jsonSchema:{
				bsonObject: "object",
				required: ["title", "text", "creator", "comments"],
				properties:{
					"title": {
						bsonType: "string",
						description: "Must be a string and is required"
					},
					"text": {
						bsonType: "string",
						description: "Must be a string and is required"
					},
					"creator": {
						bsonType: "objectId",
						description: "Must be an object and is required"
					},
					"comments": {
						bsonType: "array",
						description: "Must be an array and is required"
						items: {
							bsonType: "object",
							required: ["text", "author"],
							properties: {
								text: {
									bsonType: "string",
									description: "Must be a string and is required"
								},
					            author: {
					                bsonType: 'objectId',
					                description: 'must be an objectid and is required'
					            }
							}
						}
					}
				}
			}
		}
	}
)


________________________________________

Data modelling

if you frequently write your data, then you should avoid duplicates.
how much data you'll save and how big it is ?
how data is related to each other ?
how duplicates hurt you ? (many updates ?)
will you hit data limits ?
________________________________________

setting the log path:
mongod --dbpath /Users/John Doer/data/db/ --logpath /Users/John Doer/data/logs/mongo.log

other options:

--repair
--directoryperdb
--storageEngine arg (wired tiger is the default engine)

--fork (runs only on linux and mac) (to run mongo server as a backfround process)
to stop it, login to mongo console and do: 
> user admin 
> db.shutdownServer()

For windows:
net start MongoDB 
net stop MongoDB 

________________________________________

mongo config file: name it as mongod.cfg

storage:
	dbPath: "/some/path/to/db"
systemLog:
	destination: file
	dbPath: "/some/path/to/logs/somefile.log"

So while running, do this:

mongod --config
mongod --f <path to mongod.cfg file>

________________________________________

Diving deep into 'create' operations:

you can create your onwn id as follows:

db.hobbies.insertMany([
	{_id: "sports", name: "sports"},
	{_id: "cooking", name: "cooking"},
	{_id: "hiking", name: "hiking"}
])


but if you again try to insert the document with one duplicate somwhere in between, then it will throw error:

db.hobbies.insertMany([
	{_id: "yoga", name: "yoga"},
	{_id: "cooking", name: "cooking"},
	{_id: "gym", name: "gym"}
])

this will throw error for 'cooking' as that _id already existed.
BUT the first item 'yoga' will get inserted. and FROM the item where error occured, nothing is proceeded.
To prevent these error, we can say ordered: false.

db.hobbies.insertMany([
		{_id: "yoga", name: "yoga"},
		{_id: "cooking", name: "cooking"},
		{_id: "gym", name: "gym"}
	],
	{ordered: false}
)
________________________________________

writeConcern

when any write operations is performed like insertOne, updateMany, etc,

data -> shell/driver -> mongo server -> wiredTiger engine ->

the engine first writes to memory and then writes to disk.
But what if the power goes off while writing operaitons is happening ?

Hence there is a todo file called journal which stored what needs to be done when power is back/when mongo server is up. those instructions will be executed. its a kind of back up system.

here w:1 means : we are specifiying how many instances are there where our data needs to be stored.
with w:1 , you'll get ack when you do a write operations.

j: journal : which is a todo list 

{ w: 1, j: undefined}
{ w: 1, j: true}
{ w: 1, wtimeout: 200, j: true} //speiifying write timeout within which writ operation should happen

example:

db.persons.insertOne(
	{
		name: "someone", 
		age:33
	}, 
	{
		writeConcern: {
			w: 1,
			j: true,
			wtimeout: 200
		}
	}
)
 
________________________________________

Importing data into mongodb

mongoimport <fileName.json> -d movieDb -c movies --jsonArray --drop
(--drop is optional, if its present, then old collection will be dropped and data will be imported as a new collection )

________________________________________

Diving deep into read operations:

operators:
	query & projection
	query selectors
		comparison
		logical
		element
		evaluation
		array
		comments
		geo spatial
	projection operators
		$
		$elemMatch
		$meta
		$slice

operators:

https://docs.mongodb.com/manual/reference/operator/query/

db.movies.find({runtime: 60}) = db.movies.find({runtime: {$eq: 60}})

db.movies.find({runtime: {$ne: 60}}) // not equal
db.movies.find({runtime: {$lt: 60}}) // less than
db.movies.find({runtime: {$lte: 60}}) // less than or equal to
db.movies.find({runtime: {$gt: 60}}) // greater than or equal to
db.movies.find({runtime: {$gte: 60}}) // greater than or equal to

db.movies.find({"ratings.average": {$gt: 7} })
db.movies.find({generes: "Drama"}).pretty()			// items exists in array ?
db.movies.find({generes: ["Drama"]}).pretty()		// checking for equality of array


db.movies.find({runtime: {$in: [30, 42]}})			// find movies whose runtime is either 30 or 42
db.movies.find({runtime: {$nin: [30, 42]}})			// find all movies whose runtime is neither 30 nor 42

db.movies.find(
	{
		$or: [
			{ "rating.average": { {$lt: 5} } },
			{ "rating.average": { {$gt: 9.3} } }
		]
	}
)

db.movies.find(
	{
		$and: [
			{ "rating.average": { {$gt: 9} } },
			{ "generes": "Drama" }
		]
	}
)

can also be written in below format;

db.movies.find(
	{
		"ratings.average": {$gt: 9},
		generes: "Drama"
	}
)

db.movies.find({ runtime: { $not: {$eq: 60} } }) = db.movies.find({runtime: {$ne: 60}})
db.users.find({age: {$exists: true}}).pretty()
db.users.find({age: {$exists: true, $gt: 30}}).pretty()
db.users.find({age: {$exists: true, $ne: null}}).pretty()
db.users.find({phone: {$type: "double"}}).pretty()
db.users.find({phone: {$type: ["double", "string"]}}).pretty()		// phone number type double or string


db.movies.find({summary: {$regex: /musical/}}).pretty()

$exp is used to compare two fields inside a document 

Example: sales data:
{
	{
		_id: ObjectId("8u3ob283h423bku24b2"),
		volume: 100,
		target: 120
	},
	{
		_id: ObjectId("8u3ob283h423bku24b2"),
		volume: 89,
		target: 80
	},
	{
		_id: ObjectId("8u3ob283h423bku24b2"),
		volume: 200,
		target: 177
	}
}


________________________________________


























